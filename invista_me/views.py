from django.shortcuts import render, redirect,HttpResponse
from .models import Investimento  # traz as informa√ßoes do banco de dados para passar para nossa pagina
from .forms import InvestimentoForm
from django.contrib.auth.decorators import login_required # vai permitir que soment usuarios cadastrados acessem certas partes da pagina

# Create your views here.

# passo 1 para exibir uma nova pagina para um usuario
def investimentos (request):
    # ‚Üì passando os dados para nossa pagina atravez de um dicionario
    dados = {
        'dados': Investimento.objects.all()   
    }   # ‚Üë chave 'dados' que ira receber as informa√ßoes extraidas de investimento.objects.all()...estamos dizendo para entrar para ir no banco de dados na tabela investimento encontr todos os objetos ou seja todos os registros e dentro de todos os registros retorne para mim all(retorne todos eles) guardei essas informa√ßoes dentr da chave dados do dicionario dados
    return render(request,'investimentos/investimentos.html',context=dados)  # peguei os dados da linha 12 e passe como parametro dentro do return como context=dados

# exibir detalhe dos investimentos
def detalhe(request,id_investimento):
    dados = {
        'dados':Investimento.objects.get(pk=id_investimento)}
    return render(request,'investimentos/detalhe.html',dados)

# cria um novo investimento
@login_required
def criar(request):
    if request.method == 'POST':
      investimento_form = InvestimentoForm(request.POST)
      if investimento_form.is_valid():
        investimento_form.save()
        return redirect('investimentos')
    else:
        investimento_form = InvestimentoForm()
        formulario = {
            'formulario': investimento_form
        }
        return render(request,'investimentos/novo_investimento.html',context=formulario)


# editar um investimento, permite entra em um investimento e edita-lo
@login_required
def editar(request,id_investimento):# define uma fun√ßao view chamada editar, recebe dois parametros request: a requisi√ßao http. id_investimento: o id que sera alterado, o nome id_investimento foi dado por mim msm
    investimento = Investimento.objects.get(pk=id_investimento) # busca no banco de dados um objeto da model INVESTIMENTO coom o id(chave primaria) igual ao id_investimento fornecido, se nao encontra essa linha lan√ßara um erro
    if request.method == 'GET': # verifica se a requisi√ßao HTTP e do tipo GET, o que normalmente significa que o usuarioquer ver o formulario de edi√ßao
        formulario = InvestimentoForm(instance=investimento) # cria um formulario (investimentoform) ja preenchido com os dados atuais do investimento buscado. o parametro instance=investimento serve para ligar o formulario ao objeto existente, permitindo a edi√ßao
        return render(request,'investimentos/novo_investimento.html',{'formulario':formulario}) # renderiza o template novo_investimento.html, passando o formulario preenchido para ele. assim o usuario pode editar os dados ja existentes
    else: # caso a requisi√ßao nao seja um get assume-se que e um POST (ou seja o formulario foi enviado para salvar as altera√ßoes)
        formulario = InvestimentoForm(request.POST,instance=investimento) # cria um novo formulario com os dados enviados pelo usuario(request,POST) e ainda vincula ao objeto investimento. isso indica que estamos atualizando registros existentes
        if formulario.is_valid():# verifica se os dados enviados no formulario sao validos (de acordo com as regras da model e do form)
            formulario.save() # salva as altera√ßoes feitas no objeto investimento no banco de dados
            return redirect('investimentos') # redireciona o usuario para view chamada INVESTIMENTOS(geralmente uma lista de todos os investimentos)
                                            # o nome investimentos deve estar definido na urls.py como name='investimentos'

# excluir um investimento
@login_required
def excluir(request,id_investimento):
    investimento = Investimento.objects.get(pk=id_investimento)
    if request.method == 'POST':
        investimento.delete()
        return redirect('investimentos')
    return render(request,'investimentos/confirma_exclusao.html',{'item':investimento})
    











#üîç Por que sempre tem request na fun√ß√£o def?
#Porque o Django chama automaticamente essa fun√ß√£o quando uma URL √© acessada, e ele passa um objeto HttpRequest como primeiro argumento.
#Esse objeto request cont√©m todos os dados da requisi√ß√£o, por exemplo:



 # O que √© um Model no Django?
#üìå Defini√ß√£o:
#Um Model √© uma representa√ß√£o de uma tabela do banco de dados em Python.
#Cada model vira uma tabela no banco, e cada atributo do model vira uma coluna.

# üß± Exemplo:
#python
# Copiar c√≥digo
# from django.db import models

#class Investimento(models.Model):
 #   nome = models.CharField(max_length=100)
  #  valor = models.DecimalField(max_digits=10, decimal_places=2)
   # data = models.DateField()
#üß† Isso cria uma tabela chamada investimento com as colunas:

# nome (texto),

# valor (decimal),

# data (data).

# -------------------------------------------------

# üóÇ Usos do Model:
# Um Model representa uma tabela do banco de dados.
# Com ele √© poss√≠vel criar, consultar, editar e deletar dados.

# Exemplo de uso na view:
# invest = Investimento.objects.create(nome="A√ß√µes", valor=1000, data="2025-06-01")

# ‚úÖ O que √© um Form no Django?
# üìå Defini√ß√£o:
# Um Form (formul√°rio) √© uma classe que:
# - Define quais campos o usu√°rio pode preencher.
# - Valida os dados enviados.
# - Pode estar ligada a um Model (ModelForm) ou n√£o.

# üßæ Exemplo de ModelForm:
# from django import forms
# from .models import Investimento

# class InvestimentoForm(forms.ModelForm):
#    class Meta:
#        model = Investimento
#        fields = ['nome', 'valor', 'data']

# Esse formul√°rio:
# - Cria um formul√°rio baseado no model Investimento.
# - Permite que o usu√°rio preencha os campos: nome, valor e data.

# üõ† Usos do Form:
# Na view:
# formulario = InvestimentoForm(request.POST)

# if formulario.is_valid():
#    formulario.save()  # Salva no banco

# No template (HTML), o formul√°rio seria exibido assim (exemplo Django):
'''
<form method="POST">
    {{ formulario.as_p }}
    <button type="submit">Salvar</button>
</form>
'''
